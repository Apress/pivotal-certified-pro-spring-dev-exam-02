plugins {
    id 'java'
}

allprojects {
    group 'com.apress.cems'
    version '1.0-SNAPSHOT'
}

subprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.spring.io/snapshot/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

java.sourceCompatibility = JavaVersion.VERSION_12

ext {
    springVersion = '5.2.0.RC2'
    springSecurityVersion = '5.2.0.RC1'
    springBootVersion = '2.2.0.M6'
    springBootR2dbcVersion = '0.1.0.BUILD-SNAPSHOT'
    springJpaVersion = '2.2.0.RC3'
    springMongoVersion = '2.1.9.RELEASE'

    //testing
    junit5Version = '5.5.1'
    junit5PlatformVersion = '1.5.1'
    mockitoAllVersion = '2.0.2-beta'
    mockitoVersion = '2.26.0'
    easymockVersion = '4.0.2'
    junitVersion = '4.13-beta-3'
    jmockVersion = '2.10.0-RC3'
    mongoVersion = '2.2.0'
    hamcrestVersion = '2.1'
    restAssuredVersion = '4.0.0'

    //aop libs
    aspectjVersion = '1.9.4'
    objenesisVersion = '3.0.1'

    //logging
    slf4jVersion = '2.0.0-alpha0'
    logbackVersion = '1.3.0-alpha4'

    // db
    hibernateVersion = '5.4.3.Final'
    ojdbcVersion = '12.1.0.2'
    hikariVersion = '3.3.1'

    //in memory test database
    h2Version = '1.4.199' // This version has this bug https://github.com/h2database/h2database/issues/1841,
    // version 1.4.197 recommended as a workaround cannot transform Timestamp values to LocalDateTime

    tomcatVersion = '9.0.22'
    lang3Version = '3.8.1'
    prometheusVersion = '1.2.0'

    //view technologies
    thymeleafVersion = '3.0.11.RELEASE'
    jacksonVersion = '2.9.9'
    poiVersion = '4.1.0'
    itextVersion = '5.5.13.1'

    //microservices
    springDataCommonsVersion = '2.1.10.RELEASE'
    springCloudVersion = '2.1.2.RELEASE'
    cloudReleaseTrainVersion ='Hoxton.M2'

    //reactive
    reactorVersion = '3.3.0.M3'
    nettyVersion = '0.9.0.M3'
    r2dbcDataVersion = '1.0.0.RELEASE'
    r2dbcH2Version = '1.0.0.M7'
    r2dbcReleaseTrainVersion = 'Arabba-M8'
    bootR2dbcReleaseTrainVersion = 'Moore-BUILD-SNAPSHOT'

    //we group libraries by their purpose so we can import them easier in the modules
    boot = [
            springBootPlugin: "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
            starter         : "org.springframework.boot:spring-boot-starter:$springBootVersion",
            starterWeb      : "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            starterWebflux      : "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion",
            starterJetty    : "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion",
            starterAop      : "org.springframework.boot:spring-boot-starter-aop:$springBootVersion",
            starterSecurity : "org.springframework.boot:spring-boot-starter-security:$springBootVersion",
            starterJpa      : "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
            starterMongo    : "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion",
            starterMongoReactive    : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBootVersion",
            starterTest     : "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
            actuator        : "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
            devtools        : "org.springframework.boot:spring-boot-devtools:$springBootVersion",
            starterThymeleaf: "org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion",
            starterMustache : "org.springframework.boot:spring-boot-starter-mustache:$springBootVersion",
            prometheus      : "io.micrometer:micrometer-registry-prometheus:$prometheusVersion",
            annotationProcessor: "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion",
            starterR2dbc : "org.springframework.boot.experimental:spring-boot-starter-data-r2dbc:$springBootR2dbcVersion",
            starterR2dbcH2 : "org.springframework.boot.experimental:spring-boot-starter-r2dbc-h2:$springBootR2dbcVersion"
    ]

    spring = [
            beans          : "org.springframework:spring-beans:$springVersion",
            contextSupport : "org.springframework:spring-context-support:$springVersion",
            jdbc           : "org.springframework:spring-jdbc:$springVersion",
            orm            : "org.springframework:spring-orm:$springVersion",
            test           : "org.springframework:spring-test:$springVersion",
            web            : "org.springframework:spring-web:$springVersion",
            webmvc         : "org.springframework:spring-webmvc:$springVersion",
            data           : "org.springframework.data:spring-data-jpa:$springJpaVersion",
            mongo          : "org.springframework.data:spring-data-mongodb:$springMongoVersion",
            r2dbcData      : "org.springframework.data:spring-data-r2dbc:$r2dbcDataVersion",
            securityWeb    : "org.springframework.security:spring-security-web:$springSecurityVersion",
            securityTaglibs: "org.springframework.security:spring-security-taglibs:$springSecurityVersion",
            securityConfig : "org.springframework.security:spring-security-config:$springSecurityVersion",
            securityTest   : "org.springframework.security:spring-security-test:$springSecurityVersion",
            dataBom         : "org.springframework.data:spring-data-releasetrain:$bootR2dbcReleaseTrainVersion",
    ]

    cloud = [
            dataCommons   : "org.springframework.data:spring-data-commons:$springDataCommonsVersion",
            cloudStarter  : "org.springframework.cloud:spring-cloud-starter-config:$springCloudVersion",
            eurekaServer  : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:$springCloudVersion",
            eurekaClient  : "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springCloudVersion",
            bom           : "org.springframework.cloud:spring-cloud-dependencies:$cloudReleaseTrainVersion"
    ]

    testing = [
            junit         : "junit:junit:$junitVersion",
            api           : "org.junit.jupiter:junit-jupiter-api:$junit5Version",
            engine        : "org.junit.jupiter:junit-jupiter-engine:$junit5Version",
            vintageEngine : "org.junit.vintage:junit-vintage-engine:$junit5Version",
            easymock      : "org.easymock:easymock:$easymockVersion",
            jmockju4      : "org.jmock:jmock-junit4:$jmockVersion",
            jmockju5      : "org.jmock:jmock-junit5:$jmockVersion",
            mockitoAll    : "org.mockito:mockito-all:$mockitoAllVersion",
            mockito       : "org.mockito:mockito-junit-jupiter:$mockitoVersion",
            platformRunner: "org.junit.platform:junit-platform-runner:$junit5PlatformVersion",
            mongo         : "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$mongoVersion",
            hamcrest      : "org.hamcrest:hamcrest:$hamcrestVersion",
            springMockMvc : "io.rest-assured:spring-mock-mvc:$restAssuredVersion",
            nettyReactor  : "io.projectreactor.netty:reactor-netty:$nettyVersion",
            reactorTest   : "io.projectreactor:reactor-test:$reactorVersion",
            restAssured   : "io.rest-assured:rest-assured:$restAssuredVersion",
            restAssuredAll: "io.rest-assured:rest-assured-all:$restAssuredVersion" // needed because it is not a transitive dep
    ]

    misc = [
            h2               : "com.h2database:h2:$h2Version",
/*            r2dbcH2          : "io.r2dbc:r2dbc-h2:$r2dbcH2Version",
            r2dbcBom         : "io.r2dbc:r2dbc-bom:$r2dbcReleaseTrainVersion",*/
            jsr250           : "javax.annotation:javax.annotation-api:1.3.2",
            inject           : "javax.inject:javax.inject:1",
            javaxValidation  : "javax.validation:validation-api:2.0.1.Final",
            javaxPersistence : "org.eclipse.persistence:javax.persistence:2.2.1",
            lang3            : "org.apache.commons:commons-lang3:$lang3Version",
            ojdbc            : "com.oracle:ojdbc7:$ojdbcVersion",
            slf4j            : "org.slf4j:slf4j-api:$slf4jVersion",
            logback          : "ch.qos.logback:logback-classic:$logbackVersion",
            aspectjweaver    : "org.aspectj:aspectjweaver:$aspectjVersion",
            hikari           : "com.zaxxer:HikariCP:$hikariVersion",
            jstl             : "javax.servlet:jstl:1.2",
            servletApi       : "javax.servlet:javax.servlet-api:4.0.1",
            asm              : "asm:asm:3.3.1",
            thymeleaf        : "org.thymeleaf:thymeleaf-spring5:$thymeleafVersion",
            thymeleafSecurity: "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE",
            jacksonDatabind  : "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            jacksonJsr310    : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
            poi              : "org.apache.poi:poi:$poiVersion",
            itext            : "com.itextpdf:itextpdf:$itextVersion",
            jaxbApi          : "javax.xml.bind:jaxb-api:2.3.1",
            projectReactor   : "io.projectreactor:reactor-core:$reactorVersion"
    ]

    tomcat = [
            core    : "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
            catalina: "org.apache.tomcat:tomcat-catalina:$tomcatVersion"
    ]

    hibernate = [
            validator : "org.hibernate:hibernate-validator:6.0.17.Final",
            ehcache   : "org.hibernate:hibernate-ehcache:$hibernateVersion",
            em        : "org.hibernate:hibernate-entitymanager:$hibernateVersion",
            core      : "org.hibernate:hibernate-core:$hibernateVersion",
            javaxELApi: "org.glassfish:javax.el:3.0.1-b11"
    ]
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://repo.spring.io/snapshot/" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
}

task allDeps {
    doLast {
        description 'Task used to display dependencies for all modules in the project'
        subprojects.each { p ->
            println()
            println " $p.name ".center(60, '*')
            println()
            p.configurations.all.findAll { !it.allDependencies.empty }.each { c ->
                println " ${c.name} ".center(60, '-')
                c.allDependencies.each { dep ->
                    println "$dep.group:$dep.name:$dep.version"
                }
                println "-" * 60
            }
        }
    }
}